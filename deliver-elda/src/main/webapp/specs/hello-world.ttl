#
# A hello-world config. 
#

# Assorted prefix declarations. Some of them are for the structuring
# of the API config, others are for the vocabulary definitions.
#

@prefix spec:               <http://something.uk/api-config#> .

@prefix api:                <http://purl.org/linked-data/api/vocab#> .
@prefix dc:                 <http://purl.org/dc/elements/1.1/> .
@prefix dct:				<http://purl.org/dc/terms/> .

@prefix foaf:               <http://xmlns.com/foaf/0.1/> .

@prefix owl:                <http://www.w3.org/2002/07/owl#> .

@prefix rdf:                <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:               <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:                <http://www.w3.org/2001/XMLSchema#> .
@prefix skos:               <http://www.w3.org/2004/02/skos/core#> .

# The elda namespace/prefix is for Elda extensions to the LDA specification.

@prefix elda:               <http://www.epimorphics.com/vocabularies/lda#> .

@prefix hello:				<http://localhost:8080/elda/vocabulary/>.

#############################################################################
# API config

spec:api a api:API 
	; rdfs:label "Hello World example"@en
	# Name the SPARQL endpoint which supplies the data we present
	; api:sparqlEndpoint <local:data/example-data.ttl>
	; api:maxPageSize 50
	; api:defaultPageSize 10 
	; api:defaultViewer api:labelledDescribeViewer
	; api:defaultFormatter spec:HtmlFormatter 
	; api:endpoint spec:publishers 
	#
	# Elda magic follows
	#
	; elda:metadataOptions "bindings,formats,versions,execution" 
	# tells Elda where its scripts and stylesheets are as a relative URI
	; api:variable [ api:name "_resourceRoot"; api:value "/elda/" ]
	# tells Elda where the SPARQL endpoint's form page is, if it has one
	; api:variable [api:name "visibleSparqlForm"; api:value "http://education.data.gov.uk/sparql/education/query.html"]
	# compatability with Puelia
	; api:variable [api:name "_strip_has"; api:value "yes"]
	# paths which are rewritten away from education.data.gov.uk
	; api:variable [api:name "_stagePattern"; api:value "^/doc/school$"]
	.
    
# Endpoint definitions: just the one, list all schools

spec:publishers a api:ListEndpoint 
	; rdfs:label "Publishers" 
	; api:uriTemplate "/publishers" 
	; api:selector [api:filter "type=Publisher"]
	.	
	
spec:games a api:ListEndpoint 
	; rdfs:label "Games" 
	; api:uriTemplate "/games" 
	; api:selector [api:filter "type=BoardGame"]
	.		
		
	
# Tells Elda that the SPARQL endpoint understands nested SELECTS in SPARQL.
# This can significantly reduce the size of queries.

<http://education.data.gov.uk/sparql/education/query> elda:supportsNestedSelect true.

#
# This XSLT formatter produces rich HTML from the viewer properties.
#

spec:HtmlFormatter a api:XsltFormatter 
	; api:name "html" 
	; api:mimeType "text/html; charset=utf-8" 
	; api:stylesheet "xslt/result.xsl"
	.
	
hello:BoardGame a rdfs:Class
	; api:label "Board Game"
	.
	
hello:Publisher a rdfs:Class
	; api:label "Publisher"
	.
	
dct:publisher a rdf:Property
	; api:label "publishes"
	.
	
rdfs:label a rdf:Property
	; api:multiValued true
	; api:label "label"
	.
	
rdf:type a rdf:Property
    ; api:multiValued true 
    ; rdfs:range rdfs:Class 
	; api:label "type"
	.
		
